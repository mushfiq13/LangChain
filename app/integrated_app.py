from fastapi import FastAPI
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from openai import OpenAI
from langchain.chains import SQLDatabaseChain
from langchain.utilities import SQLDatabase

app = FastAPI()

# Initialize Langchain components
llm = OpenAI()
db = SQLDatabase.from_uri("sqlite:///test.db")
sql_chain = SQLDatabaseChain.from_llm(llm, db)

class QueryRequest(BaseModel):
    question: str

class QueryResponse(BaseModel):
    sql_query: str
    result: list
    explanation: str

@app.post("/ai-query", response_model=QueryResponse)
async def ai_powered_query(request: QueryRequest):
    try:
        result = sql_chain.run(request.question)

        return QueryResponse(
            sql_query="Generated by AI",
            result=[{"sample": "data"}],
            explanation=result
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

async def get_database_schema():
    return {"tables": db.get_table_names(), "schema": db.table_info}
